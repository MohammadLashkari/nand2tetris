package main

import (
	"fmt"
	"os/exec"
	"testing"
)

func TestSumProgram(t *testing.T) {

	tests := []struct {
		name    string
		program string
		want    string
	}{
		{
			"sum",
			"sum.asm",
			`0000000000000000
1111110000010000
0000000000010000
1110001100001000
0000000000010001
1110111111001000
0000000000010010
1110101010001000
0000000000010001
1111110000010000
0000000000010000
1111010011010000
0000000000011000
1110001100000001
0000000000010010
1111110000010000
0000000000010001
1111000010010000
0000000000010010
1110001100001000
0000000000010001
1111110111001000
0000000000001000
1110101010000111
0000000000010010
1111110000010000
0000000000000001
1110001100001000
0000000000011100
1110101010000111
`,
		},
		{
			"rectangle",
			"rectangle.asm",
			`0000000000000000
1111110000010000
0000000000010000
1110001100001000
0100000000000000
1110110000010000
0000000000010001
1110001100001000
0000000000010010
1110101010001000
0000000000010010
1111110000010000
0000000000010000
1111010011010000
0000000000011011
1110001100000001
0000000000010001
1111110000100000
1110111010001000
0000000000100000
1110110000010000
0000000000010001
1111000010001000
0000000000010010
1111110111001000
0000000000001010
1110101010000111
0000000000011011
1110101010000111
`,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			programName := fmt.Sprintf("../04/%s", tt.program)
			cmd := exec.Command("go", "run", "assembler.go", programName)
			out, err := cmd.CombinedOutput()
			if err != nil {
				t.Fatalf("program failed: %v", err)
			}

			if got, want := string(out), tt.want; got != want {
				t.Errorf("unexpected output:\nGOT:\n%s\n\nWANT:\n%s", got, tt.want)
			}
		})
	}
}
